#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include <BWAPI.h>
#include <BWAPI/Client.h>

using namespace BWAPI;

namespace py = pybind11;

namespace Pybrood {
    // http://stackoverflow.com/a/24315631/2399966
    std::string string_replace(std::string str, const std::string& from, const std::string& to) {
        size_t start_pos = 0;
        while((start_pos = str.find(from, start_pos)) != std::string::npos) {
            str.replace(start_pos, from.length(), to);
            start_pos += to.length(); // Handles case where 'to' is a substring of 'from'
        }
        return str;
    }

    typedef std::array<int, 2> UniversalPosition;

    template <class Point>
    inline UniversalPosition convert_position(const Point&amp; src){
        return {src.x, src.y};
    }
{% for t in ('Position', 'WalkPosition', 'TilePosition') %}
    namespace {{ t }}s
    {
        {%- for k in ('Invalid', 'None', 'Unknown', 'Origin') %}
        const UniversalPosition {{ k }} = convert_position<BWAPI::{{ t }}>(BWAPI::{{ t }}s::{{ k }});
        {%- endfor %}
    }
    {%- endfor %}
}

PYBIND11_PLUGIN(pybrood) {
    py::module m("pybrood", "BWAPI module bridge");
    {% for t in ('', 'Walk', 'Tile') %}
    m.attr("{{ t|upper }}POSITION_SCALE") = py::cast(BWAPI::{{ t|upper }}POSITION_SCALE);
    {%- for k in ('Invalid', 'None', 'Unknown', 'Origin') %}
    m.attr("{{ t|upper }}POSITION_{{ k|upper }}") = py::cast(Pybrood::{{ t }}Positions::{{ k }});
    {%- endfor %}
    {%- endfor %}
    {% for x in pureenums %}
    {{ x|indent(4) }}
    {% endfor %}
    {% for x in classes %}
    {{ x|indent(4) }}
    {% endfor %}
    auto enum_instances = py::dict();
    m.attr("enum_instances") = enum_instances;
    {% for x in objenums %}
    {{ x|indent(4) }}
    {% endfor %}
    m.attr("client_instance") = py::cast(&BWAPI::BWAPIClient, py::return_value_policy::reference);
    return m.ptr();
}
