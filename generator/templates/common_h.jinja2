#pragma once
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include <BWAPI.h>
#include <BWAPI/Client.h>

using namespace BWAPI;

namespace py = pybind11;

namespace Pybrood {

// http://stackoverflow.com/a/24315631/2399966
std::string string_replace(std::string str, const std::string& from, const std::string& to) {
    size_t start_pos = 0;
    while((start_pos = str.find(from, start_pos)) != std::string::npos) {
        str.replace(start_pos, from.length(), to);
        start_pos += to.length(); // Handles case where 'to' is a substring of 'from'
    }
    return str;
}

typedef std::array<int, 2> UniversalPosition;

template <class Point>
inline UniversalPosition convert_position(const Point&amp; src){
    return {src.x, src.y};
}

{% for t in ('Position', 'WalkPosition', 'TilePosition') %}
namespace {{ t }}s
{
    {% for k in ('Invalid', 'None', 'Unknown', 'Origin')
     %}const UniversalPosition {{ k }} = convert_position<BWAPI::{{ t }}>(BWAPI::{{ t }}s::{{ k }});
    {% endfor %}
}
{% endfor %}

{% for k in classes
 %}class {{ k }};
{% endfor %}

}
